{"version":3,"sources":["components/Name/Name.jsx","components/Number/Number.jsx","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["Name","name","hendleInputChange","idInput","htmlFor","type","pattern","title","required","id","value","onChange","Number","number","ContactForm","state","loginInputNameId","shortid","generate","loginInputNamberId","event","currentTarget","setState","handleSubmit","preventDefault","props","onSubmitForm","reset","this","onSubmit","Component","ContactItem","onDeleteContact","onClick","ContactList","contacts","map","contact","Filter","hendleInputFilter","App","filter","formSubmitHandler","entry","some","alert","prevState","deleteContact","contactId","getCurrentContacts","regExp","RegExp","test","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","className","css","document","getElementById"],"mappings":"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","file":"static/js/main.f9a01095.chunk.js","sourcesContent":["const Name = ({ name, hendleInputChange, idInput, htmlFor}) => {\r\n     \r\n    return (\r\n        <label htmlFor={htmlFor}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id = {idInput}\r\n              value={name}\r\n              onChange = {hendleInputChange}\r\n                \r\n            />\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default Name;\r\n","const Number = ({ number, hendleInputChange, idInput, htmlFor }) => {\r\n    return (\r\n        <label htmlFor={htmlFor}>\r\n            Number\r\n            <input\r\n               type=\"tel\"\r\n               name=\"number\"\r\n               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n               title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n               required\r\n               id = {idInput}\r\n               value={number}\r\n               onChange = {hendleInputChange}\r\n            />\r\n        </label>\r\n    )\r\n}\r\nexport default Number;","import React, { Component } from 'react';\r\nimport shortid from 'shortid';\r\nimport Name from '../Name'\r\nimport Number from '../Number'\r\n\r\nclass ContactForm extends Component {\r\n    state = {\r\n      name: '',\r\n      number: ''\r\n    };\r\n    \r\n    loginInputNameId = shortid.generate(); \r\n    loginInputNamberId = shortid.generate(); \r\n  \r\n    hendleInputChange = event => {\r\n      const {value, name} = event.currentTarget;\r\n      this.setState({ [name]: value });\r\n    }\r\n\r\n    handleSubmit = event => {\r\n      event.preventDefault();\r\n      this.props.onSubmitForm(this.state)\r\n      this.reset()\r\n    };\r\n    \r\n    reset = () => {\r\n      this.setState({ name: '', number: '' })\r\n    };\r\n  \r\n    render() {\r\n      const { name, number } = this.state;\r\n      \r\n      return (\r\n        <form onSubmit = {this.handleSubmit}>\r\n          \r\n          <Name\r\n            name={name}\r\n            hendleInputChange={this.hendleInputChange}\r\n            idInput={this.loginInputNameId}\r\n            htmlFor={this.loginInputNameId}\r\n          />\r\n\r\n          <Number\r\n            number={number}\r\n            hendleInputChange={this.hendleInputChange}\r\n            idInput={this.loginInputNamberId}\r\n            htmlFor={this.loginInputNamberId}\r\n          />\r\n          \r\n          <button type=\"submit\">Add contact</button>\r\n        </form>\r\n      )\r\n    }\r\n}\r\n\r\nexport default ContactForm;","import PropTypes from 'prop-types'\r\n\r\nconst ContactItem = ({id, name, number, onDeleteContact}) => (\r\n    <>\r\n        <p>{`${name}: ${number}`}</p>\r\n        <button type= \"button\" onClick = {() => onDeleteContact(id)} >Delete</button>\r\n    </> \r\n)\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n};","import ContactItem from '../ContactItem'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => (\r\n\t<ul>\r\n\t\t{contacts.map(contact => {\r\n\t\t\tconst {id, name, number} = contact\r\n\t\t\treturn (\r\n                <li key={id}>\r\n                    <ContactItem\r\n\t\t\t\t\t\tid={id}\r\n\t\t\t\t\t\tname={name}\r\n\t\t\t\t\t\tnumber={number}\r\n\t\t\t\t\t\tonDeleteContact={onDeleteContact}\r\n\t\t\t\t\t/>\r\n                </li>\r\n            )\r\n\t\t})}\r\n\t</ul>\r\n)\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onClick: PropTypes.func,\r\n};\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Filter = ({id, hendleInputFilter}) => {\r\n    return (\r\n        <>\r\n            <h3>Find contats by name</h3>\r\n            <input\r\n                type=\"text\"\r\n                name=\"filter\"\r\n                id={id}\r\n                onChange = {hendleInputFilter}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  hendleInputFilter: PropTypes.func.isRequired,\r\n};","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm'\nimport ContactList from './components/ContactList'\nimport Filter from './components/Filter'\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  };\n\n  componentDidUpdate(prevProps, prevState ) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    };\n  };\n\n  formSubmitHandler = ({name, number}) => {\n    const { contacts } = this.state;\n    const entry = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    if (contacts.some(contact => contact.name === name)) {\n      alert(`${name} already in the contacts.`);\n      return;\n    }\n\n    this.setState(prevState => ({\n      ...prevState,\n      contacts: [entry, ...prevState.contacts],\n    }));\n  };\n\n  hendleInputFilter = (event) => {\n    const {value, name} = event.currentTarget;\n    this.setState({[name]: value})\n  }\n\n  deleteContact = (contactId) => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId)\n    }));\n  };\n\n  getCurrentContacts = () => {\n    const { filter, contacts } = this.state;\n    const regExp = new RegExp(filter, 'gi');\n\n    if (filter) {\n      return contacts.filter(contact => regExp.test(contact.name));\n    }\n    return contacts;\n  };\n\n  render() {\n    const onSubmitForm = this.formSubmitHandler;\n    const id = shortid.generate;\n    const hendleInputFilter = this.hendleInputFilter;\n    const contacts = this.getCurrentContacts;\n    const onDeleteContact = this.deleteContact;\n\n    return (\n      <>\n        <h1>Phonebook</h1>\n        <ContactForm\n          onSubmitForm={onSubmitForm}\n        />\n        <h2>Contacts</h2>\n        <Filter\n          id={id()}\n          hendleInputFilter={hendleInputFilter}\n        />\n        <ContactList\n          contacts={contacts()}\n          onDeleteContact={onDeleteContact}\n        />\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport css from './index.module.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className = {css}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}